@page "/playersbylastname/{lastName}"
@inject IPlayerService PlayerService
@inject ITeamService TeamService

@if (PageLoad)
{
    <div style="padding-bottom: 200px;">
        <div style="padding-top: 50px;">
            <MudText Typo="Typo.h3" Align="Align.Center" Style="font-weight:bold" Color="Color.Primary">Players</MudText>
        </div>

        @for (var i = 1; i <= Counter; i++)
        {
            <div style="padding-top: 25px;">
                <MudStack Justify="@_justify" Row="true">
                    @foreach (var player in GetPlayersForRow(PlayerCounter))
                    {
                        string imageFile = String.Concat("images/", player.ImageFile);
                        string address = String.Concat(player.PlayerAddress.AddressLine, ", ", player.PlayerAddress.State, ", ", player.PlayerAddress.ZipCode);
                        string teamName = GetTeamName(player.TeamId);
                        <MudCard>
                            <MudCardMedia Image="@imageFile" Height="200" />
                            <MudCardContent>
                                <MudText Typo="Typo.h5" Style="font-weight: bold;">@player.FirstName @player.LastName</MudText>
                                <MudText Typo="Typo.body1" Style="padding-bottom: 5px;">@teamName</MudText>
                                <MudText Typo="Typo.body2">@address</MudText>
                                <MudText Typo="Typo.body2">Birthday: @player.PlayerDetail.BirthDate.ToString("MMM dd, yyyy")</MudText>
                                <MudText Typo="Typo.body2">Height: @player.PlayerDetail.Height (inches)</MudText>
                                <MudText Typo="Typo.body2">Weight: @player.PlayerDetail.Weight (lbs)</MudText>
                                <MudText Typo="Typo.body2">@player.PlayerDetail.EmailAddress</MudText>
                                <MudText Typo="Typo.body2">@player.PlayerDetail.PhoneNumber</MudText>
                                <MudText Typo="Typo.body2">Postion: @player.PlayerDetail.Position</MudText>
                            </MudCardContent>
                            <MudCardActions Style="align-content: center">
                            </MudCardActions>
                        </MudCard>
                    }
                </MudStack>
            </div>

        }

    </div>

}
else
{
    <Loading />
}

@code {
    private bool PageLoad = false;
    private int PlayerCount = 0;
    private int PageSize = 0;
    private int Counter = 0;
    private Justify _justify = Justify.SpaceEvenly;
    private int PlayerCounter = 0;

    [Parameter]
    public string LastName { get; set; }

    private GetPlayersByLastNameResponse PlayersResponse { get; set; }
    private GetTeamsResponse TeamsResponse { get; set; }

    protected override async Task OnInitializedAsync()
    {
        PlayersResponse = await PlayerService.GetPlayersByLastName(LastName);
        TeamsResponse = await TeamService.GetTeams();
        PlayerCount = (int)PlayersResponse.Players.Count();
        Console.WriteLine(PlayerCount);
        PageSize = 4;
        Console.WriteLine(PageSize);
        Counter = (int)Math.Ceiling((decimal)PlayerCount / (decimal)PageSize);
        Console.WriteLine(Counter);
        PageLoad = true;
    }

    private string GetTeamName(Guid id)
    {
        var teamName = TeamsResponse.Teams.Data.FirstOrDefault(t => t.Id == id).TeamName;

        return teamName;
    }

    private IEnumerable<PlayerModel> GetPlayersForRow(int count)
    {
        Console.WriteLine(count);
        var players = PlayersResponse.Players.OrderBy(p => p.LastName).ThenBy(p => p.FirstName).Skip(4 * count).Take(4);
        PlayerCounter++;
        return players;
    }


    // private async void PageChanged(int i)
    // {
    //     i = i - 1;
    //     PlayersResponse = await PlayerService.GetPlayers(i, PageSize);
    // }
}
