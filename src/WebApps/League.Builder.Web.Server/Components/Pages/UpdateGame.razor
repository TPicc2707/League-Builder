@page "/updategame/{id}"
@inject ITeamService TeamService
@inject ISeasonService SeasonService
@inject IGameService GameService
@inject IStandingsService StandingsService
@inject NavigationManager NavManager
@inject IHttpContextAccessor HttpContextAccessor
@inject ISnackbar Snackbar

<AuthorizeView Roles="@String.Concat(Roles.UpdateGames, ", ", Roles.ReadGames, ", ", Roles.ReadTeams, ", ", Roles.ReadSeasons, ", ", Roles.UpdateStandings, ", ", Roles.ReadStandings)" Context="auth">
    <Authorized>
        @if (PageLoad)
        {
            <div style="padding-top: 150px; padding-bottom: 175px;">
                <MudText Typo="Typo.h3" Style="font-weight: bold; padding-bottom: 25px;" Align="Align.Center" Color="Color.Primary">Update Game</MudText>
                <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                    <DataAnnotationsValidator />
                    <MudGrid>
                        <MudItem xs="12" sm="7">
                            <MudCard>
                                <MudCardContent>
                                    <MudText Typo="Typo.body1" Style="font-weight: bold; padding-top: 5px; padding-bottom: 5px;">Game Information</MudText>
                                    <MudSelect Class="mt-3" Label="Away Team" @bind-Value="awayTeamId">
                                        @foreach (var team in TeamsResponse.Teams)
                                        {
                                            <MudSelectItem Value="team.Id">@team.TeamName</MudSelectItem>
                                        }
                                    </MudSelect>
                                    <MudSelect Class="mt-3" Label="Home Team" @bind-Value="homeTeamId">
                                        @foreach (var team in TeamsResponse.Teams)
                                        {
                                            <MudSelectItem Value="team.Id">@team.TeamName</MudSelectItem>
                                        }
                                    </MudSelect>
                                    <MudDatePicker Class="mt-3" Label="Start Date" DateFormat="MM/dd/yyyy" Editable="true" @bind-Date="startDate" />
                                    <MudTimePicker Class="mt-3" Label="Start Time" AmPm="true" Editable="true" @bind-Time="startTime" />
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        <MudItem xs="12" sm="5">
                            <MudPaper Class="pa-4 mud-height-full">
                                <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                                @if (success)
                                {
                                    <MudText Color="Color.Success">Success</MudText>
                                }
                                else
                                {
                                    <MudText Color="@Color.Error">
                                        <CustomValidation @ref="customValidation" />
                                        <ValidationSummary />
                                    </MudText>
                                }
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" sm="7">
                            <MudCard>
                                <MudCardContent>
                                    <MudText Typo="Typo.body1" Style="font-weight: bold; padding-top: 5px; padding-bottom: 5px;">Game Details</MudText>
                                    @if (model.GameStatus == GameStatus.Completed)
                                    {
                                        <MudSelect Class="mt-3" Label="Winning Team" @bind-Value="winningTeamId">
                                            @foreach (var team in TeamsInGame)
                                            {
                                                <MudSelectItem Value="team.Id">@team.TeamName</MudSelectItem>
                                            }
                                        </MudSelect>
                                    }
                                    <MudNumericField Label="Away Team Score" Class="mt-3"
                                                     @bind-Value="model.AwayTeamScore" For="@(() => model.AwayTeamScore)" />
                                    <MudNumericField Label="Home Team Score" Class="mt-3"
                                                     @bind-Value="model.HomeTeamScore" For="@(() => model.HomeTeamScore)" />
                                    <MudSelect Class="mt-3" Label="Game Status" @bind-Value="model.GameStatus">
                                        @foreach (var status in Enum.GetValues<GameStatus>())
                                        {
                                            <MudSelectItem Value="status">@status</MudSelectItem>
                                        }
                                    </MudSelect>
                                    @if (model.GameStatus == GameStatus.Completed)
                                    {
                                        <MudDatePicker Class="mt-3" Label="End Date" DateFormat="MM/dd/yyyy" Editable="true" @bind-Date="endDate" />
                                        <MudTimePicker Class="mt-3" Label="End Time" AmPm="true" Editable="true" @bind-Time="endTime" />
                                    }
                                </MudCardContent>
                                <MudCardActions>
                                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" FullWidth="true">Update</MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                        <MudItem xs="12">
                            <MudText Typo="Typo.body2" Align="Align.Center">
                                Fill out the form correctly to see the success message.
                            </MudText>
                        </MudItem>
                    </MudGrid>
                </EditForm>

            </div>

        }
        else
        {
            <Loading />
        }
    </Authorized>
    <NotAuthorized>
        <MudText>You are not authorized to view this page...</MudText>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public string Id { get; set; }
    private CustomValidation? customValidation;
    private bool PageLoad = false;
    private Guid awayTeamId;
    private Guid homeTeamId;
    private Guid winningTeamId;
    private IEnumerable<TeamModel> TeamsInGame;
    private DateTime? startDate;
    private TimeSpan? startTime;
    private DateTime? endDate;
    private TimeSpan? endTime;
    bool success;
    UpdateGameForm model = new UpdateGameForm();
    private GetGameByIdResponse GameModel { get; set; }
    private GetTeamsByLeagueResponse TeamsResponse { get; set; }
    private GetSeasonByYearResponse SeasonResponse { get; set; }
    private GetStandingsByTeamResponse StandingsResponse { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (await AuthorizationStatus.IsUserAccessTokenExpired(HttpContextAccessor))
        {
            NavManager.NavigateTo("authentication/logout");
        }

        var gameId = Guid.Parse(Id);
        GameModel = await GameService.GetGameById(gameId);
        model.LeagueId = GameModel.Game.LeagueId;
        TeamsResponse = await TeamService.GetTeamsByLeague(model.LeagueId);
        awayTeamId = GameModel.Game.AwayTeam.Id;
        homeTeamId = GameModel.Game.HomeTeam.Id;
        TeamsInGame = TeamsResponse.Teams.Where(t => t.Id == awayTeamId || t.Id == homeTeamId).ToList();
        model.AwayTeamScore = GameModel.Game.GameDetail.AwayTeamScore;
        model.HomeTeamScore = GameModel.Game.GameDetail.HomeTeamScore;
        model.GameStatus = GameModel.Game.GameStatus;
        winningTeamId = GameModel.Game.WinningTeamId is not null ? (Guid)GameModel.Game.WinningTeamId : TeamsInGame.First().Id;

        startDate = GameModel.Game.GameDetail.StartTime;
        startTime = GameModel.Game.GameDetail.StartTime.TimeOfDay;

        if(GameModel.Game.GameDetail.EndTime is not null)
        {
            endDate = GameModel.Game.GameDetail.EndTime.Value;
            endTime = GameModel.Game.GameDetail.EndTime.Value.TimeOfDay;
        }

        PageLoad = true;
    }

    public class UpdateGameForm
    {
        public Guid LeagueId { get; set; }
        [Required(ErrorMessage = "Must have a Start Date.")]
        public DateTime StartTime { get; set; }

        public DateTime? EndTime { get; set; }

        public int AwayTeamScore { get; set; }

        public int HomeTeamScore { get; set; }

        public GameStatus GameStatus { get; set; }

    }

    private async Task OnValidSubmit(EditContext context)
    {
        customValidation?.ClearErrors();

        var errors = new Dictionary<string, List<string>>();

        ValidateModel(errors);

        if (errors.Any())
            customValidation?.DisplayErrors(errors);
        else
        {
            await SubmitGame();
            success = true;
            Snackbar.Add("Game has been updated.", Severity.Success);
            NavManager.NavigateTo($"/leaguegames/{model.LeagueId}");
            StateHasChanged();
        }
    }

    private void ValidateModel(Dictionary<string, List<string>> errors)
    {
        if (startDate is null && startTime is null)
            errors.Add(nameof(model.StartTime),
                            [" " + "Start Date & Time is required."]);
        else if (startDate is null || startTime is null)
            errors.Add(nameof(model.StartTime),
                            startDate is null ? [" " + "Start Date is required."] : [" " + "Start Time is required."]);

        if(model.GameStatus == GameStatus.Completed)
        {
            if (endDate is null && endTime is null)
                errors.Add(nameof(model.EndTime),
                                        [" " + "End Date & Time is required."]);
            else if (endDate is null || endTime is null)
                errors.Add(nameof(model.EndTime),
                                endDate is null ? [" " + "End Date is required."] : [" " + "End Time is required."]);
        }

        if (awayTeamId == homeTeamId)
            errors.Add("Teams",
                       [" " + "Home & Away Team must be different."]);

        if(model.GameStatus == GameStatus.Completed && winningTeamId == Guid.Empty)
            errors.Add("Winning Team",
                           [" " + "Game is Completed, please select a winner."]);

        if(model.GameStatus == GameStatus.Completed || model.GameStatus == GameStatus.InProgress)
        {
            if (model.AwayTeamScore == model.HomeTeamScore)
                errors.Add("Scores",
                                       [" " + "Scores cant be the same."]);

            if (winningTeamId == awayTeamId && model.HomeTeamScore > model.AwayTeamScore)
                errors.Add("Scores",
                                    [" " + "Winning Team must have more than the losing team."]);

            if (winningTeamId == homeTeamId && model.AwayTeamScore > model.HomeTeamScore)
                errors.Add("Scores",
                                    [" " + "Winning Team must have more than the losing team."]);
        }
    }

    private async Task SubmitGame()
    {
        DateTime modelStartDate = (DateTime)startDate;
        TimeSpan modelStartTime = (TimeSpan)startTime;
        model.StartTime = new DateTime(modelStartDate.Year, modelStartDate.Month, modelStartDate.Day, modelStartTime.Hours, modelStartTime.Minutes, modelStartTime.Seconds);

        if(endDate is not null || endTime is not null)
        {
            DateTime modelEndDate = (DateTime)endDate;
            TimeSpan modelEndTime = (TimeSpan)endTime;
            model.EndTime = new DateTime(modelEndDate.Year, modelEndDate.Month, modelEndDate.Day, modelEndTime.Hours, modelEndTime.Minutes, modelEndTime.Seconds);
        }

        var gameId = Guid.Parse(Id);
        SeasonResponse = await SeasonService.GetSeasonByYear(model.StartTime.Year);
        Models.Game.GameDetailModel gameDetail = new GameDetailModel(model.AwayTeamScore, model.HomeTeamScore, model.StartTime, model.EndTime);
        Models.Game.AwayTeamDetailModel awayTeamDetail = new AwayTeamDetailModel(awayTeamId, string.Empty);
        Models.Game.HomeTeamDetailModel homeTeamDetail = new HomeTeamDetailModel(homeTeamId, string.Empty);
        UpdateGameModel updateGameModel = new UpdateGameModel(gameId, model.LeagueId, winningTeamId, SeasonResponse.Season.Id, gameDetail, awayTeamDetail, homeTeamDetail, (int)model.GameStatus);
        UpdateGameRequest request = new UpdateGameRequest(updateGameModel);
        await GameService.UpdateGame(request);
        if(model.GameStatus == GameStatus.Completed)
        {
            await UpdateTeamStandings(SeasonResponse, awayTeamId);
            await UpdateTeamStandings(SeasonResponse, homeTeamId);
        }
    }

    private async Task UpdateTeamStandings(GetSeasonByYearResponse seasonResponse, Guid teamId)
    {
        //Away Team
        StandingsResponse = await StandingsService.GetStandingsByTeam(teamId);
        var currentStandings = StandingsResponse.Standings.FirstOrDefault(s => s.SeasonId == seasonResponse.Season.Id);
        StandingsDetailModel standingsDetail = new StandingsDetailModel(currentStandings.StandingsDetail.GamesPlayed + 1,
            winningTeamId == teamId ? currentStandings.StandingsDetail.Wins + 1 : currentStandings.StandingsDetail.Wins,
            winningTeamId == teamId ? currentStandings.StandingsDetail.Losses : currentStandings.StandingsDetail.Losses + 1, currentStandings.StandingsDetail.Ties);
        TeamDetailModel teamDetail = new TeamDetailModel(teamId, string.Empty);
        UpdateStandingsModel standingsModel = new UpdateStandingsModel(currentStandings.Id, model.LeagueId, seasonResponse.Season.Id, standingsDetail, (int)currentStandings.StandingsStatus, teamDetail);
        UpdateStandingsRequest request = new UpdateStandingsRequest(standingsModel);
        await StandingsService.UpdateStandings(request);
    }
}
