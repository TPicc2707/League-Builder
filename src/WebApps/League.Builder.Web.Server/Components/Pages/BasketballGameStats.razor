@page "/basketballgamestats/{id}"
@inject IStatsService StatsService
@inject IGameService GameService
@inject IPlayerService PlayerService
@inject ISnackbar Snackbar
@inject NavigationManager NavManager;
@inject IHttpContextAccessor HttpContextAccessor

<AuthorizeView Roles="@String.Concat(Roles.ReadStats, ", ", Roles.ReadGames, ", ", Roles.ReadPlayers)" Context="auth">
    <Authorized>
        @if (PageLoad)
        {
            <div style="padding-top: 100px;">
                <div style="padding-bottom: 25px;">
                    <MudText Typo="Typo.h3" Align="Align.Center" Style="font-weight:bold" Color="Color.Primary">@GameModel.Game.AwayTeam.TeamName vs @GameModel.Game.HomeTeam.TeamName</MudText>
                </div>
                <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" Style="padding: 25px;" Centered="true">
                    <MudTabPanel Text="@String.Concat(GameModel.Game.AwayTeam.TeamName + " Stats")">
                        <MudTable Items="@Model.Where(x => x.TeamId == GameModel.Game.AwayTeam.Id)" Hover="true">
                            <ColGroup>
                                <col />
                                <col />
                                <col />
                                <col />
                                <col />
                                <col />
                                <col />
                                <col />
                                <col />
                                <col />
                                <col />
                                <col />
                                <col />
                                <col />
                            </ColGroup>
                            <HeaderContent>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">Name</MudTh>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">S</MudTh>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">MIN</MudTh>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">PTS</MudTh>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">REB</MudTh>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">AST</MudTh>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">BLK</MudTh>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">STL</MudTh>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">TO</MudTh>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">FGM</MudTh>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">FGA</MudTh>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">3PM</MudTh>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">3PA</MudTh>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">FTM</MudTh>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">FTA</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Name" Style="font-size: 12px;">@context.PlayerName</MudTd>
                                @if (context.Start)
                                {
                                    <MudTd DataLabel="S"><MudIcon Color="@Color.Success" Style="font-size: 14px;" Icon="@Icons.Material.Filled.Check" /></MudTd>
                                }
                                else
                                {
                                    <MudTd DataLabel="S"></MudTd>
                                }
                                <MudTd DataLabel="MIN">@context.Minutes</MudTd>
                                <MudTd DataLabel="PTS">@context.Points</MudTd>
                                <MudTd DataLabel="REB">@context.Rebounds</MudTd>
                                <MudTd DataLabel="AST">@context.Assists</MudTd>
                                <MudTd DataLabel="BLK">@context.Blocks</MudTd>
                                <MudTd DataLabel="STL">@context.Steals</MudTd>
                                <MudTd DataLabel="TO">@context.Turnovers</MudTd>
                                <MudTd DataLabel="FGM">@context.FieldGoalsMade</MudTd>
                                <MudTd DataLabel="FGA">@context.FieldGoalsAttempted</MudTd>
                                <MudTd DataLabel="3PM">@context.ThreePointersMade</MudTd>
                                <MudTd DataLabel="3PA">@context.ThreePointersAttempted</MudTd>
                                <MudTd DataLabel="FTM">@context.FreeThrowsMade</MudTd>
                                <MudTd DataLabel="FTA">@context.FreeThrowsAttempted</MudTd>
                            </RowTemplate>
                        </MudTable>
                        <div style="padding-top: 25px;">
                            <MudSimpleTable>
                                <thead>
                                    <tr class="mud-theme-primary">
                                        <th></th>
                                        <th>PTS</th>
                                        <th>REB</th>
                                        <th>AST</th>
                                        <th>BLK</th>
                                        <th>STL</th>
                                        <th>TO</th>
                                        <th>FGM</th>
                                        <th>FGA</th>
                                        <th>3PM</th>
                                        <th>3PA</th>
                                        <th>FTM</th>
                                        <th>FTA</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td>Totals:</td>
                                        <td>@AwayTotalPoints</td>
                                        <td>@AwayTotalRebounds</td>
                                        <td>@AwayTotalAssists</td>
                                        <td>@AwayTotalBlocks</td>
                                        <td>@AwayTotalSteals</td>
                                        <td>@AwayTotalTurnovers</td>
                                        <td>@AwayTotalFieldGoalsMade</td>
                                        <td>@AwayTotalFieldGoalsAttempted</td>
                                        <td>@AwayTotalThreePointersMade</td>
                                        <td>@AwayTotalThreePointersAttempted</td>
                                        <td>@AwayTotalFreeThrowsMade</td>
                                        <td>@AwayTotalFreeThrowsAttempted</td>
                                    </tr>
                                </tbody>
                            </MudSimpleTable>
                        </div>
                    </MudTabPanel>
                    <MudTabPanel Text="@String.Concat(GameModel.Game.HomeTeam.TeamName + " Stats")">
                        <MudTable Items="@Model.Where(x => x.TeamId == GameModel.Game.HomeTeam.Id)" Hover="true">
                            <ColGroup>
                                <col />
                                <col />
                                <col />
                                <col />
                                <col />
                                <col />
                                <col />
                                <col />
                                <col />
                                <col />
                                <col />
                                <col />
                                <col />
                                <col />
                            </ColGroup>
                            <HeaderContent>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">Name</MudTh>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">S</MudTh>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">MIN</MudTh>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">PTS</MudTh>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">REB</MudTh>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">AST</MudTh>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">BLK</MudTh>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">STL</MudTh>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">TO</MudTh>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">FGM</MudTh>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">FGA</MudTh>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">3PM</MudTh>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">3PA</MudTh>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">FTM</MudTh>
                                <MudTh Style="font-weight:bold" Class="mud-theme-primary">FTA</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Name" Style="font-size: 12px;">@context.PlayerName</MudTd>
                                @if (context.Start)
                                {
                                    <MudTd DataLabel="S"><MudIcon Color="@Color.Success" Style="font-size: 14px;" Icon="@Icons.Material.Filled.Check" /></MudTd>
                                }
                                else
                                {
                                    <MudTd DataLabel="S"></MudTd>
                                }
                                <MudTd DataLabel="MIN">@context.Minutes</MudTd>
                                <MudTd DataLabel="PTS">@context.Points</MudTd>
                                <MudTd DataLabel="REB">@context.Rebounds</MudTd>
                                <MudTd DataLabel="AST">@context.Assists</MudTd>
                                <MudTd DataLabel="BLK">@context.Blocks</MudTd>
                                <MudTd DataLabel="STL">@context.Steals</MudTd>
                                <MudTd DataLabel="TO">@context.Turnovers</MudTd>
                                <MudTd DataLabel="FGM">@context.FieldGoalsMade</MudTd>
                                <MudTd DataLabel="FGA">@context.FieldGoalsAttempted</MudTd>
                                <MudTd DataLabel="3PM">@context.ThreePointersMade</MudTd>
                                <MudTd DataLabel="3PA">@context.ThreePointersAttempted</MudTd>
                                <MudTd DataLabel="FTM">@context.FreeThrowsMade</MudTd>
                                <MudTd DataLabel="FTA">@context.FreeThrowsAttempted</MudTd>
                            </RowTemplate>
                        </MudTable>
                        <div style="padding-top: 25px;">
                            <MudSimpleTable>
                                <thead>
                                    <tr class="mud-theme-primary">
                                        <th></th>
                                        <th>PTS</th>
                                        <th>REB</th>
                                        <th>AST</th>
                                        <th>BLK</th>
                                        <th>STL</th>
                                        <th>TO</th>
                                        <th>FGM</th>
                                        <th>FGA</th>
                                        <th>3PM</th>
                                        <th>3PA</th>
                                        <th>FTM</th>
                                        <th>FTA</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td>Totals:</td>
                                        <td>@HomeTotalPoints</td>
                                        <td>@HomeTotalRebounds</td>
                                        <td>@HomeTotalAssists</td>
                                        <td>@HomeTotalBlocks</td>
                                        <td>@HomeTotalSteals</td>
                                        <td>@HomeTotalTurnovers</td>
                                        <td>@HomeTotalFieldGoalsMade</td>
                                        <td>@HomeTotalFieldGoalsAttempted</td>
                                        <td>@HomeTotalThreePointersMade</td>
                                        <td>@HomeTotalThreePointersAttempted</td>
                                        <td>@HomeTotalFreeThrowsMade</td>
                                        <td>@HomeTotalFreeThrowsAttempted</td>
                                    </tr>
                                </tbody>
                            </MudSimpleTable>
                        </div>
                    </MudTabPanel>
                </MudTabs>
            </div>
        }
        else
        {
            <Loading />
        }
    </Authorized>
    <NotAuthorized>
        <MudText>You are not authorized to view this page...</MudText>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public string Id { get; set; }
    private bool PageLoad = false;
    List<BasketballStatsModel> Model = new List<BasketballStatsModel>();
    GetGameByIdResponse GameModel { get; set; }
    GetPlayersByTeamResponse AwayPlayersModel { get; set; }
    GetPlayersByTeamResponse HomePlayersModel { get; set; }
    GetBasketballStatsByTeamResponse AwayPlayerStatsModel { get; set; }
    GetBasketballStatsByTeamResponse HomePlayerStatsModel { get; set; }

    private int AwayTotalPoints = 0;
    private int AwayTotalFieldGoalsMade = 0;
    private int AwayTotalFieldGoalsAttempted = 0;
    private int AwayTotalThreePointersMade = 0;
    private int AwayTotalThreePointersAttempted = 0;
    private int AwayTotalFreeThrowsMade = 0;
    private int AwayTotalFreeThrowsAttempted = 0;
    private int AwayTotalRebounds = 0;
    private int AwayTotalAssists = 0;
    private int AwayTotalSteals = 0;
    private int AwayTotalBlocks = 0;
    private int AwayTotalTurnovers = 0;

    private int HomeTotalPoints = 0;
    private int HomeTotalFieldGoalsMade = 0;
    private int HomeTotalFieldGoalsAttempted = 0;
    private int HomeTotalThreePointersMade = 0;
    private int HomeTotalThreePointersAttempted = 0;
    private int HomeTotalFreeThrowsMade = 0;
    private int HomeTotalFreeThrowsAttempted = 0;
    private int HomeTotalRebounds = 0;
    private int HomeTotalAssists = 0;
    private int HomeTotalSteals = 0;
    private int HomeTotalBlocks = 0;
    private int HomeTotalTurnovers = 0;


    protected override async Task OnInitializedAsync()
    {
        if (await AuthorizationStatus.IsUserAccessTokenExpired(HttpContextAccessor))
        {
            NavManager.NavigateTo("authentication/logout");
        }

        var gameId = Guid.Parse(Id);
        GameModel = await GameService.GetGameById(gameId);
        AwayPlayersModel = await PlayerService.GetPlayersByTeam(GameModel.Game.AwayTeam.Id);
        HomePlayersModel = await PlayerService.GetPlayersByTeam(GameModel.Game.HomeTeam.Id);
        AwayPlayerStatsModel = await StatsService.GetBasketballStatsByTeam(GameModel.Game.AwayTeam.Id);
        HomePlayerStatsModel = await StatsService.GetBasketballStatsByTeam(GameModel.Game.HomeTeam.Id);
        foreach (var player in AwayPlayersModel.Players)
        {
            var playerStat = AwayPlayerStatsModel.BasketballStats.FirstOrDefault(x => x.PlayerId == player.Id && x.GameId == GameModel.Game.Id);
            if (playerStat is not null)
            {
                Model.Add(new BasketballStatsModel(GameModel.Game.LeagueId, player.TeamId, player.Id, GameModel.Game.SeasonId, GameModel.Game.Id, player.FirstName, player.LastName,
                                                    playerStat.Stats.Start, playerStat.Stats.Minutes, playerStat.Stats.Points, playerStat.Stats.FieldGoalsMade, playerStat.Stats.FieldGoalsAttempted, playerStat.Stats.ThreePointersMade, playerStat.Stats.ThreePointersAttempted,
                                                    playerStat.Stats.FreeThrowsMade, playerStat.Stats.FreeThrowsAttempted, playerStat.Stats.Rebounds, playerStat.Stats.Assists, playerStat.Stats.Steals,
                                                    playerStat.Stats.Blocks, playerStat.Stats.Turnovers));

                AwayTotalPoints += playerStat.Stats.Points;
                AwayTotalFieldGoalsMade += playerStat.Stats.FieldGoalsMade;
                AwayTotalFieldGoalsAttempted += playerStat.Stats.FieldGoalsAttempted;
                AwayTotalThreePointersMade += playerStat.Stats.ThreePointersMade;
                AwayTotalThreePointersAttempted += playerStat.Stats.ThreePointersAttempted;
                AwayTotalFreeThrowsMade += playerStat.Stats.FreeThrowsMade;
                AwayTotalFreeThrowsAttempted += playerStat.Stats.FreeThrowsAttempted;
                AwayTotalRebounds += playerStat.Stats.Rebounds;
                AwayTotalAssists += playerStat.Stats.Assists;
                AwayTotalSteals += playerStat.Stats.Steals;
                AwayTotalBlocks += playerStat.Stats.Blocks;
                AwayTotalTurnovers += playerStat.Stats.Turnovers;
            }
            else if (GameModel.Game.GameStatus == GameStatus.Completed)
                Model.Add(new BasketballStatsModel(GameModel.Game.LeagueId, player.TeamId, player.Id, GameModel.Game.SeasonId, GameModel.Game.Id, player.FirstName, player.LastName));
        }
        foreach (var player in HomePlayersModel.Players)
        {
            var playerStat = HomePlayerStatsModel.BasketballStats.FirstOrDefault(x => x.PlayerId == player.Id && x.GameId == GameModel.Game.Id);
            if (playerStat is not null)
            {
                Model.Add(new BasketballStatsModel(GameModel.Game.LeagueId, player.TeamId, player.Id, GameModel.Game.SeasonId, GameModel.Game.Id, player.FirstName, player.LastName,
                                                    playerStat.Stats.Start, playerStat.Stats.Minutes, playerStat.Stats.Points, playerStat.Stats.FieldGoalsMade, playerStat.Stats.FieldGoalsAttempted, playerStat.Stats.ThreePointersMade, playerStat.Stats.ThreePointersAttempted,
                                                    playerStat.Stats.FreeThrowsMade, playerStat.Stats.FreeThrowsAttempted, playerStat.Stats.Rebounds, playerStat.Stats.Assists, playerStat.Stats.Steals,
                                                    playerStat.Stats.Blocks, playerStat.Stats.Turnovers));

                HomeTotalPoints += playerStat.Stats.Points;
                HomeTotalFieldGoalsMade += playerStat.Stats.FieldGoalsMade;
                HomeTotalFieldGoalsAttempted += playerStat.Stats.FieldGoalsAttempted;
                HomeTotalThreePointersMade += playerStat.Stats.ThreePointersMade;
                HomeTotalThreePointersAttempted += playerStat.Stats.ThreePointersAttempted;
                HomeTotalFreeThrowsMade += playerStat.Stats.FreeThrowsMade;
                HomeTotalFreeThrowsAttempted += playerStat.Stats.FreeThrowsAttempted;
                HomeTotalRebounds += playerStat.Stats.Rebounds;
                HomeTotalAssists += playerStat.Stats.Assists;
                HomeTotalSteals += playerStat.Stats.Steals;
                HomeTotalBlocks += playerStat.Stats.Blocks;
                HomeTotalTurnovers += playerStat.Stats.Turnovers;


            }
            else if (GameModel.Game.GameStatus == GameStatus.Completed)
                Model.Add(new BasketballStatsModel(GameModel.Game.LeagueId, player.TeamId, player.Id, GameModel.Game.SeasonId, GameModel.Game.Id, player.FirstName, player.LastName));
        }
        PageLoad = true;
    }

    public class BasketballStatsModel
    {
        public BasketballStatsModel()
        {

        }

        public BasketballStatsModel(Guid leagueId, Guid teamId, Guid playerId, Guid seasonId, Guid gameId, string firstName, string lastName)
        {
            LeagueId = leagueId;
            TeamId = teamId;
            PlayerId = playerId;
            SeasonId = seasonId;
            GameId = gameId;
            PlayerName = String.Concat(firstName + " " + lastName);
        }

        public BasketballStatsModel(Guid leagueId, Guid teamId, Guid playerId, Guid seasonId, Guid gameId, string firstName, string lastName,
                                       bool start, int minutes, int points, int fieldGoalsMade, int fieldGoalsAttempted, int threePointersMade,
                                       int threePointersAttempted, int freeThrowsMade, int freeThrowsAttempted, int rebounds, int assists, int steals,
                                       int blocks, int turnovers)
        {
            LeagueId = leagueId;
            TeamId = teamId;
            PlayerId = playerId;
            SeasonId = seasonId;
            GameId = gameId;
            PlayerName = String.Concat(firstName + " " + lastName);
            Start = start;
            Minutes = minutes;
            Points = points;
            FieldGoalsMade = fieldGoalsMade;
            FieldGoalsAttempted = fieldGoalsAttempted;
            ThreePointersMade = threePointersMade;
            ThreePointersAttempted = threePointersAttempted;
            FreeThrowsMade = freeThrowsMade;
            FreeThrowsAttempted = freeThrowsAttempted;
            Rebounds = rebounds;
            Assists = assists;
            Steals = steals;
            Blocks = blocks;
            Turnovers = turnovers;
        }

        public Guid LeagueId { get; set; }
        public Guid TeamId { get; set; }
        public Guid PlayerId { get; set; }
        public Guid SeasonId { get; set; }
        public Guid GameId { get; set; }
        public string PlayerName { get; set; }
        public bool Start { get; set; }
        public int Minutes { get; set; }
        public int Points { get; set; }
        public int FieldGoalsMade { get; set; }
        public int FieldGoalsAttempted { get; set; }
        public int ThreePointersMade { get; set; }
        public int ThreePointersAttempted { get; set; }
        public int FreeThrowsMade { get; set; }
        public int FreeThrowsAttempted { get; set; }
        public int Rebounds { get; set; }
        public int Assists { get; set; }
        public int Steals { get; set; }
        public int Blocks { get; set; }
        public int Turnovers { get; set; }
    }
}

