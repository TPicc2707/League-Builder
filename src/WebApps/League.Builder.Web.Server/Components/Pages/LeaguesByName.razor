@page "/leaguesbyname/{name}"
@inject ILeagueService LeagueService

@if (PageLoad)
{
    <div style="padding-top: 100px; padding-bottom: 200px;">
        <div style="padding-top: 50px;">
            <MudText Typo="Typo.h3" Align="Align.Center" Style="font-weight:bold" Color="Color.Primary">Leagues</MudText>
        </div>
        <div style="padding-top: 25px;">
            <MudStack Justify="@_justify" Row="true">
                @foreach (var league in GetLeaguesForRow(LeagueCounter))
                {
                    string imageFile = String.Concat("images/", league.ImageFile);
                    string teamsLink = String.Concat("/teamsbyleague/", league.Id);
                    <MudCard>
                        <MudCardMedia Image="@imageFile" Height="200" />
                        <MudCardContent>
                            <MudText Typo="Typo.h5" Style="font-weight: bold;">@league.Name</MudText>
                            <MudText Typo="Typo.body2">@league.EmailAddress</MudText>
                            <MudText Typo="Typo.body2">@league.Description</MudText>
                        </MudCardContent>
                        <MudCardActions Style="align-content: center">
                            <MudButton Href="@teamsLink" Variant="Variant.Text" Color="Color.Primary">Teams</MudButton>
                        </MudCardActions>
                    </MudCard>
                }
            </MudStack>
        </div>

    </div>

}
else
{
    <Loading />
}

@code {
    [Parameter]
    public string Name { get; set; }
    private bool PageLoad = false;
    private Justify _justify = Justify.SpaceEvenly;
    private int LeagueCount = 0;
    private int PageSize = 0;
    private int Counter = 0;
    private int LeagueCounter = 0;

    private GetLeaguesByNameResponse LeaguesByNameResponse { get; set; }

    protected override async Task OnInitializedAsync()
    {
        LeaguesByNameResponse = await LeagueService.GetLeaguesByName(Name);
        LeagueCount = (int)LeaguesByNameResponse.Leagues.Count();
        Console.WriteLine(LeagueCount);
        PageSize = 4;
        Console.WriteLine(PageSize);
        Counter = (int)Math.Ceiling((decimal)LeagueCount / (decimal)PageSize);
        Console.WriteLine(Counter);
        PageLoad = true;
    }

    private IEnumerable<LeagueModel> GetLeaguesForRow(int count)
    {
        Console.WriteLine(count);
        var leagues = LeaguesByNameResponse.Leagues.OrderBy(p => p.Name).Skip(4 * count).Take(4);
        LeagueCount++;
        return leagues;
    }

}
