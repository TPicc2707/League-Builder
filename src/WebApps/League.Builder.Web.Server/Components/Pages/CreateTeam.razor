@page "/createteam/{id}"
@inject ITeamService TeamService
@inject ILeagueService LeagueService
@inject IStandingsService StandingsService
@inject ISeasonService SeasonService
@inject NavigationManager NavManager
@inject ISnackbar Snackbar
@inject IWebHostEnvironment env

@if (PageLoad)
{
    <div style="padding-top: 150px; padding-bottom: 175px;">
        <MudText Typo="Typo.h3" Style="font-weight: bold; padding-bottom: 25px;" Align="Align.Center" Color="Color.Primary">Create Team</MudText>
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" sm="7">
                    <MudCard>
                        <MudCardContent>
                            <MudText Typo="Typo.body1" Style="font-weight: bold; padding-top: 5px; padding-bottom: 5px;">Team Information:</MudText>
                            <MudTextField Label="Team Name" HelperText="Max. 150 characters"
                            @bind-Value="model.TeamName" For="@(() => model.TeamName)" />
                            <MudSelect Class="mt-3" Label="League" @bind-Value="leagueId">
                                @foreach (var league in LeaguesResponse.Leagues.Where(l => l.Id == leagueId))
                                {
                                    <MudSelectItem Value="league.Id">@league.Name</MudSelectItem>
                                }
                            </MudSelect>
                            <MudTextField Label="Description" Class="mt-3"
                            @bind-Value="model.Description" For="@(() => model.Description)" />
                            <MudTextField Label="First Name" Class="mt-3"
                            @bind-Value="model.FirstName" For="@(() => model.FirstName)" />
                            <MudTextField Label="Last Name" Class="mt-3"
                            @bind-Value="model.LastName" For="@(() => model.LastName)" />
                            <MudTextField Label="Email Address" Class="mt-3"
                            @bind-Value="model.EmailAddress" For="@(() => model.EmailAddress)" />
                            <MudItem Style="padding-top: 20px;">
                                <MudStack Row="true">
                                    <MudFileUpload @ref="@_fileUpload"
                                    T="IBrowserFile"
                                    For="@(() => model.File)"
                                    @bind-Files="model.File">
                                        <ActivatorContent>
                                            <MudButton Variant="Variant.Filled"
                                            Color="Color.Primary"
                                            StartIcon="@Icons.Material.Filled.CloudUpload">
                                                Team Image
                                            </MudButton>
                                        </ActivatorContent>
                                    </MudFileUpload>
                                    @if (model.File != null)
                                    {
                                        <MudText Typo="@Typo.h6">@model.File.Name</MudText>
                                    }
                                </MudStack>
                            </MudItem>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" sm="5">
                    <MudPaper Class="pa-4 mud-height-full">
                        <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                        @if (success)
                        {
                            <MudText Color="Color.Success">Success</MudText>
                        }
                        else
                        {
                            <MudText Color="@Color.Error">
                                <ValidationSummary />
                            </MudText>
                        }
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="7">
                    <MudCard>
                        <MudCardContent>
                            <MudText Typo="Typo.body1" Style="font-weight: bold; padding-top: 5px; padding-bottom: 5px;">Address:</MudText>
                            <MudTextField Label="Address Line" Class="mt-3"
                            @bind-Value="model.AddressLine" For="@(() => model.AddressLine)" />
                            <MudSelect Class="mt-3" Label="State" @bind-Value="model.State">
                                @foreach (var state in states)
                                {
                                    <MudSelectItem Value="state">@state</MudSelectItem>
                                }
                            </MudSelect>
                            <MudTextField Label="Country" Class="mt-3"
                            @bind-Value="model.Country" For="@(() => model.Country)" />
                            <MudTextField Label="Zip Code" Class="mt-3"
                            @bind-Value="model.ZipCode" For="@(() => model.ZipCode)" />

                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" FullWidth="true">Create</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.body2" Align="Align.Center">
                        Fill out the form correctly to see the success message.
                    </MudText>
                </MudItem>
            </MudGrid>
        </EditForm>

    </div>

}
else
{
    <Loading />
}

@code {
    // Add image selection when next version is worked
    [Parameter]
    public string Id { get; set; }

    CreateTeamForm model = new CreateTeamForm();
    private GetLeaguesResponse LeaguesResponse { get; set; }
    private GetSeasonByYearResponse SeasonModel { get; set; }
    private string leagueValue;
    private List<string> states;
    private Guid leagueId;
    bool success;
    bool _placeholder = true;
    bool PageLoad = false;
    private MudFileUpload<IBrowserFile> _fileUpload;


    public class CreateTeamForm
    {

        [Required]
        [StringLength(50, ErrorMessage = "Name length can't be more than 50.")]
        public string TeamName { get; set; }

        [Required]
        [StringLength(50, ErrorMessage = "First Name length can't be more than 50.")]
        public string FirstName { get; set; }

        [Required]
        [StringLength(50, ErrorMessage = "Last Name length can't be more than 50.")]
        public string LastName { get; set; }

        [Required]
        public string AddressLine { get; set; }

        [Required]
        [EmailAddress]
        public string EmailAddress { get; set; }

        [Required]
        public string State { get; set; }

        [Required]
        public string Country { get; set; }

        [Required]
        [RegularExpression(@"^\d{5}(-\d{4})?$", ErrorMessage = "Invalid Zip Code")]
        public string ZipCode { get; set; }


        public string Description { get; set; }

        public string ImageFile { get; set; }

        [Required]
        public IBrowserFile File { get; set; }


        public TeamStatus TeamStatus { get; set; }

    }

    protected override async Task OnInitializedAsync()
    {
        leagueId = Guid.Parse(Id);
        LeaguesResponse = await LeagueService.GetLeagues();
        states = Constants.States();
        PageLoad = true;
    }

    private async Task OnValidSubmit(EditContext context)
    {
        model.ImageFile = model.File.Name;
        var rootpath = Path.Combine(env.WebRootPath, "images", model.ImageFile);
        using(var stream = new FileStream(rootpath, FileMode.Create))
        {
            await model.File.OpenReadStream().CopyToAsync(stream);

        }
        Models.Team.AddressModel address = new Models.Team.AddressModel(model.FirstName, model.LastName, model.EmailAddress, model.AddressLine, model.Country, model.State, model.ZipCode);
        CreateTeamRequest request = new CreateTeamRequest(new CreateTeamModel(leagueId, model.TeamName, address, model.Description, model.ImageFile));
        var response = await TeamService.CreateTeam(request);

        //Create Standings after Team Creation
        SeasonModel = await SeasonService.GetSeasonByYear(DateTime.Now.Year);
        StandingsDetailModel standingsDetailModel = new StandingsDetailModel(0, 0, 0, 0);
        TeamDetailModel teamDetailModel = new TeamDetailModel(response.Id, model.TeamName);
        CreateStandingsModel createStandingsModel = new CreateStandingsModel(leagueId, SeasonModel.Season.Id, standingsDetailModel, teamDetailModel);
        CreateStandingsRequest standingsRequest = new CreateStandingsRequest(createStandingsModel);
        await StandingsService.CreateStandings(standingsRequest);

        success = true;
        Snackbar.Add("Team has been created.", Severity.Success);
        NavManager.NavigateTo($"/teamsbyleague/{leagueId.ToString()}");
        StateHasChanged();
    }
}
